steps to Run Docker Compose Across EC2 Instances

Step 1: SSH into the master node:
$ ssh -i "your-key.pem" ec2-user@<master-ip>


step 2: Initialize Docker Swarm:
$ docker swarm init --advertise-addr <master-private-ip>
Replace <master-private-ip> with the private IP address of the master node.
This sets the master node as the Swarm Manager.


Step 3: Join Worker Nodes to the Swarm
On the master node, get the worker join token:
$ docker swarm join-token worker

You will see a command like this:
$ docker swarm join --token <token> <master-private-ip>:2377
Replace <master-private-ip> with the master node's private IP address.
Replace <token> with the worker token provided.

step 4: SSH into each worker EC2 instance and run the join command:
$ docker swarm join --token <token> <master-private-ip>:2377
Repeat this step for all 3 worker instances.

Step 6: Verify the Swarm Nodes
On the master node, verify all nodes are part of the swarm:
$ docker node ls
You should see the master node as Leader and all workers listed as Active.

Step 7: Deploy the Docker Stack
On the master node, ensure the docker-compose.yml file is in the correct location (e.g., /home/ec2-user/docker-compose.yml).
Deploy the stack using Docker Swarm:
$ docker stack deploy -c docker-compose.yml app-stack
app-stack is the name of the stack.

Step 8: Verify the Deployment
Check the running services:
$ docker stack services app-stack


Example output:
bash
Copy code
ID              NAME               MODE          REPLICAS     IMAGE
xxxxxxxx        app-stack_vote     replicated    1/1          festusinvitesu/vote
xxxxxxxx        app-stack_result   replicated    1/1          festusinvitesu/result
xxxxxxxx        app-stack_worker   replicated    1/1          festusinvitesu/worker
xxxxxxxx        app-stack_redis    replicated    1/1          redis:alpine
xxxxxxxx        app-stack_db       replicated    1/1          postgres:15-alpine
Check the nodes and task distribution:

