Run/Debug Voting App Locally(Python/Flask)

Run the Vote App (Python/Flask):

Navigate to vote/ directory.

Install dependencies: pip install -r requirements.txt - I encountered error and had to re-install Python, using custom install and selecting all boxes.

Run the application: python app.py

By default, it may run on http://localhost:5000 (check app.py for the port).

After all steps completed App was visible on Port 80.

Ran Debug on Dockerfile and app.py and received following recommendations:-

Updated Python code from ChatGPT:-

from flask import Flask, render_template, request, make_response, g
from redis import Redis
import os
import socket
import random
import json
import logging

option_a = os.getenv('OPTION_A', "Cats")
option_b = os.getenv('OPTION_B', "Dogs")
hostname = socket.gethostname()
redis_host = os.getenv('REDIS_HOST', 'redis')

app = Flask(__name__)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
gunicorn_error_logger = logging.getLogger('gunicorn.error')
app.logger.handlers.extend(gunicorn_error_logger.handlers)
app.logger.setLevel(logging.INFO)

def get_redis():
    if not hasattr(g, 'redis'):
        g.redis = Redis(host=redis_host, db=0, socket_timeout=5)
    return g.redis

@app.route("/", methods=['POST', 'GET'])
def hello():
    voter_id = request.cookies.get('voter_id')
    if not voter_id:
        voter_id = hex(random.getrandbits(64))[2:-1]

    vote = None

    if request.method == 'POST':
        redis = get_redis()
        vote = request.form['vote']
        app.logger.info('Received vote for %s', vote)
        data = json.dumps({'voter_id': voter_id, 'vote': vote})
        try:
            redis.rpush('votes', data)
        except Exception as e:
            app.logger.error('Failed to push vote to Redis: %s', e)

    try:
        resp = make_response(render_template(
            'index.html',
            option_a=option_a,
            option_b=option_b,
            hostname=hostname,
            vote=vote,
        ))
    except Exception as e:
        app.logger.error('Template rendering failed: %s', e)
        return "An error occurred while rendering the page.", 500

    resp.set_cookie('voter_id', voter_id, secure=True, httponly=True)
    return resp

if __name__ == "__main__":
    debug_mode = os.getenv('FLASK_DEBUG', 'False').lower() == 'true'
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 80)), debug=debug_mode, threaded=True)

Updated Dockerfile from chatGPT:-

# base defines a base stage that uses the official python runtime base image
FROM python:3.11-slim AS base

# Add curl for healthcheck
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    rm -rf /var/lib/apt/lists/*

# Set the application directory
WORKDIR /usr/local/app

# Copy and install dependencies
COPY requirements.txt ./requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# dev defines a stage for development, where it'll watch for filesystem changes
FROM base AS dev
COPY . .  # Ensure app files are available
RUN pip install watchdog
ENV FLASK_ENV=development
CMD ["python", "app.py"]

# final defines the stage that will bundle the application for production
FROM base AS final

# Copy our code from the current folder to the working directory inside the container
COPY . .

# Set environment variables for production
ENV APP_ENV=production

# Expose port 80
EXPOSE 80

# Add health check
HEALTHCHECK CMD curl --fail http://localhost:80 || exit 1

# Define our command to be run when launching the container
CMD ["gunicorn", "app:app", "-b", "0.0.0.0:80", "--log-file", "-", "--access-logfile", "-", "--workers", "4", "--keep-alive", "0"]


